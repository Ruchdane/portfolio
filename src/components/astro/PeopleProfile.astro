---
import type { People } from "@/schema";
import { Image } from "astro:assets";
import { X } from "lucide-astro";
import { SocialLinks } from "@/components/astro";
interface Props extends People {}

const { profil, name, socials } = Astro.props;
---

<div data-profil>
  <button class="icon-button">
    <Image
      class="profil-trigger"
      src={profil.src}
      alt={profil.alt}
      width={45}
      height={45}
    />
  </button>
  <dialog class="profil-content">
    <form method="dialog">
      <button
        class="profil-close icon-button"
        aria-label={`dismiss profil ${profil.alt}`}
      >
        <X />
      </button>
    </form>
    <Image src={profil.src} alt={profil.alt} width={100} height={100} />
    <p>{name}</p>
    <div class="profil-social-links">
      <SocialLinks {...socials} />
    </div>
  </dialog>
</div>
<style lang="scss">
  @use "~/media-query" as *;
  .profil {
    &-trigger {
      border: 2px solid transparent;
      border-radius: 50%;
      cursor: pointer;
      &:hover {
        border-color: var(--primary-400);
      }
      &:focus {
        border-color: var(--primary-500);
      }
      &:active {
        border-color: var(--primary-600);
      }
    }
    &-close {
      position: absolute;
      top: 1rem;
      right: 1rem;
    }
    &-content {
      background-color: var(--neutral-200);
      border: none;
      border-radius: 1rem;
      flex-direction: column;
      align-items: center;
      @include breakpoint(tablet) {
        padding: 2rem 4rem;
      }
      p {
        font-family: "JetBrainsMono";
        font-size: var(--font-h2);
      }
      &[open] {
        display: flex;
      }
      &::backdrop {
        background-image: linear-gradient(
          45deg,
          var(--neutral-100),
          var(--primary-100)
        );
        opacity: 0.75;
      }
    }
    &-social-links {
      display: flex;
      gap: 0.5rem;
    }
  }
</style>
<script>
  document.addEventListener("astro:page-load", () => {
    function addDismissModalForBackdropClick(dialog: HTMLDialogElement) {
      dialog.addEventListener("click", function (event) {
        var rect = dialog?.getBoundingClientRect();
        var isInDialog =
          rect.top <= event.clientY &&
          event.clientY <= rect.top + rect.height &&
          rect.left <= event.clientX &&
          event.clientX <= rect.left + rect.width;
        if (!isInDialog) dialog?.close();
      });
    }

    document.querySelectorAll("[data-profil]").forEach((profil) => {
      const dialog = profil.querySelector("dialog");
      const button = profil.querySelector("button");
      if (dialog !== null && button !== null) {
        addDismissModalForBackdropClick(dialog);
        button.addEventListener("click", () => dialog.showModal());
      }
    });
  })
</script>
