---
import { Image } from "astro:assets";
import { type CarouselProps } from "./carousel-props";
interface Props extends CarouselProps {}

let { images, limit, class: className, ...other } = Astro.props;
if (limit !== undefined) {
  images = images.slice(0, limit);
}
---

<div class:list={["carousel", className]} data-carousel {...other}>
  {
    (
      <div class="carousel-slides">
        {images.map((image, index) => {
          const className = "carousel-slide" + (index === 0 ? " active" : "");
          return (
            <div class={className}>
              <Image {...image} layout="constrained" />
            </div>
          );
        })}
      </div>
    )
  }
  {
    images.length > 1 ? (
      <div class="carousel-triggers">
        {images.map((_image, index) => (
          <button
            class:list={["carousel-trigger", { active: index === 0 }]}
            aria-label={`Afficher l'image ${index + 1}`}
            data-index={index}
          />
        ))}
      </div>
    ) : null
  }
</div>

<style lang="scss">
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;

    &-slides {
      display: flex;
    }

    &-slide {
      min-width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: all 0.8s ease-in;
      opacity: 0;
      margin-block: auto;
      img {
        width: auto;
      }
      &.active {
        opacity: 1;
      }
    }

    &-triggers {
      display: flex;
      gap: 4px;
      justify-content: center;
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1;
    }
    &-trigger {
      background-color: var(--neutral-600);
      height: 5px;
      width: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: all ease-in-out 0.3s;
      &.active {
        background-color: var(--accent-600);
        width: 40px;
      }
    }
  }
</style>

<script>
  const carouselDuration = 3000;
  document.querySelectorAll("[data-carousel]").forEach((carousel) => {
    let currentIndex = 0;
    let direction = 1;
    const slides = carousel.querySelectorAll(".carousel-slide");
    const triggers = carousel.querySelectorAll(".carousel-trigger");
    let intervalTimer = window.setInterval(switchToNext, carouselDuration);
    function setActiveSlide(target: unknown) {
      if (!(target instanceof HTMLButtonElement)) return;
      const index = parseInt(target.dataset.index ?? "0");

      slides.forEach((slide) => {
        if (!(slide instanceof HTMLElement)) return;
        slide.classList.remove("active");
        slide.style.transform = `translateX(${-1 * index * 100}%)`;
      });
      triggers.forEach((trigger) => trigger.classList.remove("active"));

      slides[index]?.classList.add("active");
      triggers[index]?.classList.add("active");

      currentIndex = index;
    }
    triggers.forEach((trigger) =>
      trigger.addEventListener("click", (e) => {
        clearInterval(intervalTimer);
        setActiveSlide(e.target);
        intervalTimer = window.setInterval(switchToNext, carouselDuration);
      })
    );
    function switchToNext() {
      currentIndex = currentIndex + direction * 1;
      if (currentIndex < 0 || currentIndex >= slides.length) {
        direction *= -1;
        currentIndex = currentIndex + direction * 2;
      }
      setActiveSlide(triggers[currentIndex]);
    }
  });
</script>
